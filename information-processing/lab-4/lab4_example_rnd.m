%% ПРИМЕР НАИВНОГО БАЙЕСА ДЛЯ РАВНОВЕРОЯТНЫХ ЗНАЧЕНИЙ КОМПОНЕНТОВ ОБРАЗОВ

clear all;
close all;
%% 1. Задание исходных данных
n = 35; % количество признаков (исходя из размера изображений)
M = 2;
s = zeros(n, M); % количество классов и эталонные описания
% 1.1. Задание эталонов классов
s(:, 1) = ones(n, 1); 
s(:, 2) = zeros(n, 1);
% 1.2. Задание параметров эксперимента
pw = [0.8, 0.2]; % априорные вероятности гипотез
np = sum(pw);
pw = pw / np; % исключение некорректного задания априорных вероятностей
K = 10000; % количество реализаций
   
%% 2. Синтез решающего правила и расчет теоретических вероятностей ошибок
p = 0.7;  % p(x=1/w1) вероятность единицы в компонентах вектора x для 1-го класса
q = 0.4;  % p(x=1/w2) вероятность единицы в компонентах вектора x для 2-го класса
G1 = log(p / q);
G2 = log((1 - p) / (1 - q));

% 2.1. Вычисление порога принятия решений 
ns = sum(abs(s(:, 1) - s(:, 2))); % общее количество несовпадающих элементов
l0 = log(pw(2) / pw(1)); % порог принятия решения
L0 = round((l0 - n * log((1 - p) / (1 - q))) / (log((p * (1 - q)) / (q * (1 - p)))));

% 2.3. Определение вероятностей перепутывания 
P12 = binocdf(L0-1, n, p); 
P21 = 1 - binocdf(L0, n, q);
Pt = [1 - P12 P12; P21 1 - P21]; % теоретическая матрица ошибок

%% 3. Тестирование алгоритма методом статистических испытаний
% Генерация распределения индексов классов
rs = rand(1, K);
idxs = ones(1, K);
idxs(rs > pw(1)) = 2;
Pc = zeros(M); % экспериментальная матрица ошибок
p1 = [p q]; % вероятность единичного значения
for kk = 1 : K % цикл по числу реализаций
    % 3.1. Генерация образа
    r = rand(n, 1);
    x = r < p1(idxs(kk));

    % 3.2. Классификация образа
    g = sum(x .* G1) + sum((1 - x) .* G2) - l0; % значение разделяющей функции
    if g > 0
        iai = 1;
    else
        iai = 2;
    end
    
    % 3.3. Фиксация результата распознавания
    Pc(idxs(kk), iai) = Pc(idxs(kk), iai) + 1; % фиксация результата распознавания
end
for i = 1 : M
    Pc(i, :) = Pc(i, :) / sum(idxs == i);
end