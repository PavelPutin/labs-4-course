% Файл pr56_rec_npar_learn. Обучение алгоритмов распознавания на основе оценок
% плотностей распределения методами Парзена и k - ближайших соседей
clear all;
close all;
%% 1. Задание исходных данных
n = 2;M = 2; % размерность признакового пространства и число классов
H = 1; % количество статистических испытаний процесса обучения
K = 1000; % количество статистических испытаний алгоритма распознавания
pw = ones(1, M) / M; % априорные вероятности классов (значение по умолчанию)
% Исходные данные для генерации обучающих выборок 
% dm - параметр, определяющий степень рассредоточенности компонентов смесей
% DM - параметр, определяющий сдвиг областей локализации классов по осям
% L - количество компонентов в смеси каждого класса 
L = [2, 2];
dm = 2;
DM = 1;
ps = {[0.5; 0.5],[0.5; 0.5]};
mM = {[2 2], [1 -1]};
C = [5 1; 1 5];
kl_kernel = 4;

switch kl_kernel 
    case 11 
        disp("Гауссовская функция c использованием диагональной матрицы"); 
    case 12 
        disp("Гауссовская функция c использованием матрицы ковариации"); 
    case 2 
        disp("Показательная функция"); 
    case 3 
        disp("Оконная прямоугольная функция"); 
    case 4 
        disp("Оконная треугольная функция"); 
end

r = 0.25;
gm = 0.25; % параметры оценок (см.описание функций vkernel, vknn)
%% 2. Генерация обучающих данных в цикле с переменным объемом выборки
Nn = [10, 20, 30, 40, 50, 100, 150, 200, 250]; 
ln = length(Nn);
Esth1 = zeros(1, ln); % суммарная оценка Парзена методом скользящего контроля
for nn = 1:ln % цикл с изменением объема обучающих выборок
    NN = Nn(nn) * ones(1, M);
    N = Nn(nn);
    h_N = N^(-r / n); % размеры окна Парзена
    k = 2 * round(N^gm) + 1; % k - число ближайших соседей
    for h = 1:H % цикл статистических испытаний процесса обучения 
        XN = gen(n, M, NN, L, ps, mM, C, 0); % генерация обучающих выборок
        
        % 2.1. Определение вероятностей ошибок методом скользящего контроля
        Pc1 = zeros(M);
        p1_ = zeros(M, 1);
        for i = 1:M % реализация метода скользящего контроля
             XNi = XN{i};
             XNi_ = zeros(n, N - 1);
             indi = [1:i - 1, i + 1:M];
             for j = 1:N
                x = XNi(:, j);
                indj = [1:j - 1, j + 1:N]; % изъятие тестового образа i - го класса
                XNi_(:, 1:j - 1) = XNi(:, 1:j - 1);
                XNi_(:, j:end) = XNi(:, j + 1:end);
                p1_(i) = vkernel(x, XNi_, h_N, kl_kernel); % оценка Парзена
                for t = 1:M - 1
                     ij = indi(t);
                     p1_(ij) = vkernel(x, XN{ij}, h_N, kl_kernel);
                end
                [ui1, iai1] = max(p1_);
                Pc1(i, iai1) = Pc1(i, iai1) + 1;
             end
             Pc1(i, :) = Pc1(i, :) / N;
        end
        disp("Матрица ошибок c объёмом выборки " + num2str(N));
        disp(Pc1);
        Esth1(nn) = Esth1(nn) + (1 - sum(pw.* diag(Pc1)')); % суммарная ошибка
    end % по h
end % по nn
Esth1 = Esth1 / H;
%% 4. Визуализация зависимостей вероятностей ошибок
% figure;
% grid on;
% hold on;
% ms = max(Esth1);
% axis([Nn(1), Nn(ln), 0, ms + 0.001]); % установка границ поля графика по осям
% p = plot(Nn, Esth1, '-b');
% set(p, 'LineWidth', 1.0);
% title('Суммарная вероятность ошибки по методу оценки Парзена с использованием метода скользящего контроля', 'FontName', 'Courier', 'FontSize', 14);
% xlabel('N', 'FontName', 'Courier', 'FontSize', 14);
% ylabel('Es', 'FontName', 'Courier', 'FontSize', 14);
% hold off;